{"version":3,"file":"index.esm.js","sources":["../src/colorModes.ts","../src/theme.ts","../src/breakpoints.ts","../src/preflight.ts","../src/createCssFunction.ts","../src/createStyled.ts","../src/createX.ts","../src/createCreateGlobalStyle.ts","../src/create.ts","../src/index.ts"],"sourcesContent":["import {\n  createGlobalStyle,\n  ThemeContext,\n  ThemeProvider,\n} from 'styled-components'\nimport { createColorModeProvider, createColorStyles } from '@xstyled/core'\n\nconst ColorModeStyle = createGlobalStyle`${(p: {\n  theme: any\n  targetSelector: string\n}) => createColorStyles(p.theme, { targetSelector: p.targetSelector })}`\n\nexport const ColorModeProvider = createColorModeProvider({\n  ThemeContext,\n  ThemeProvider,\n  ColorModeStyle,\n})\n\nexport {\n  useColorMode,\n  getColorModeInitScriptElement,\n  getColorModeInitScriptTag,\n} from '@xstyled/core'\n","import { useContext, ContextType } from 'react'\nimport { ThemeContext } from 'styled-components'\nimport { createUseGetter } from '@xstyled/core'\nimport { th } from '@xstyled/system'\n\nexport const useTheme = (): ContextType<typeof ThemeContext> => {\n  return useContext(ThemeContext)\n}\n\nexport const useTh = createUseGetter(th, useTheme)\n\nexport const useAngle = createUseGetter(th.angle, useTheme)\nexport const useAnimation = createUseGetter(th.animation, useTheme)\nexport const useBorder = createUseGetter(th.border, useTheme)\nexport const useBorderColor = createUseGetter(th.borderColor, useTheme)\nexport const useBorderStyle = createUseGetter(th.borderStyle, useTheme)\nexport const useBorderWidth = createUseGetter(th.borderWidth, useTheme)\nexport const useColor = createUseGetter(th.color, useTheme)\nexport const useDuration = createUseGetter(th.duration, useTheme)\nexport const useFont = createUseGetter(th.font, useTheme)\nexport const useFontSize = createUseGetter(th.fontSize, useTheme)\nexport const useFontWeight = createUseGetter(th.fontWeight, useTheme)\nexport const useInset = createUseGetter(th.inset, useTheme)\nexport const useLetterSpacing = createUseGetter(th.letterSpacing, useTheme)\nexport const useLineHeight = createUseGetter(th.lineHeight, useTheme)\nexport const usePercent = createUseGetter(th.percent, useTheme)\nexport const usePx = createUseGetter(th.px, useTheme)\nexport const useRadius = createUseGetter(th.radius, useTheme)\nexport const useRingWidth = createUseGetter(th.ringWidth, useTheme)\nexport const useShadow = createUseGetter(th.shadow, useTheme)\nexport const useSize = createUseGetter(th.size, useTheme)\nexport const useSpace = createUseGetter(th.space, useTheme)\nexport const useTimingFunction = createUseGetter(th.timingFunction, useTheme)\nexport const useTransform = createUseGetter(th.transform, useTheme)\nexport const useTransition = createUseGetter(th.transition, useTheme)\nexport const useTransitionProperty = createUseGetter(\n  th.transitionProperty,\n  useTheme,\n)\nexport const useZIndex = createUseGetter(th.zIndex, useTheme)\n","import {\n  useThemeScreens,\n  useThemeBreakpoint,\n  useThemeUp,\n  useThemeDown,\n} from '@xstyled/core'\nimport { Screens } from '@xstyled/system'\nimport { useTheme } from './theme'\n\nexport { useViewportWidth } from '@xstyled/core'\n\nexport const useScreens = (): Screens => {\n  return useThemeScreens(useTheme())\n}\n\nexport const useBreakpoint = (): string | null => {\n  return useThemeBreakpoint(useTheme())\n}\n\nexport const useUp = (key: string | number): boolean => {\n  return useThemeUp(useTheme(), key)\n}\n\nexport const useDown = (key: string | number): boolean => {\n  return useThemeDown(useTheme(), key)\n}\n","import { createGlobalStyle } from 'styled-components'\nimport { getPreflightStyles } from '@xstyled/system'\n\nexport const Preflight = createGlobalStyle(({ theme }) =>\n  getPreflightStyles(theme),\n)\n","/* eslint-disable no-continue, no-loop-func, no-cond-assign */\nimport {\n  css as scCss,\n  FlattenSimpleInterpolation,\n  ThemedCssFunction,\n} from 'styled-components'\nimport { StyleGenerator, Theme } from '@xstyled/system'\nimport { flattenStrings } from '@xstyled/util'\nimport { createTransform } from '@xstyled/core'\n\nexport type XCSSFunction = ThemedCssFunction<Theme>\n\nexport const createCssFunction = <TGen extends StyleGenerator>(\n  generator: TGen,\n): XCSSFunction => {\n  const transform = createTransform(generator)\n  return ((...args: Parameters<XCSSFunction>) => {\n    const scCssArgs = scCss(...args)\n    const flattenedArgs = flattenStrings(scCssArgs as any[])\n    return flattenedArgs.map(transform) as FlattenSimpleInterpolation\n  }) as XCSSFunction\n}\n","/* eslint-disable no-continue, no-loop-func, no-cond-assign */\nimport type { ElementType } from 'react'\nimport { BoxElements } from '@xstyled/core'\nimport { string } from '@xstyled/util'\nimport { StyleGenerator, StyleGeneratorProps, Theme } from '@xstyled/system'\nimport scStyled, {\n  StyledConfig,\n  ThemedBaseStyledInterface,\n  ThemedStyledFunction,\n} from 'styled-components'\nimport { createCssFunction, XCSSFunction } from './createCssFunction'\n\nconst scStyledInterop =\n  // @ts-ignore\n  typeof scStyled === 'function' ? scStyled : scStyled.default\n\nconst getCreateStyle = (\n  baseCreateStyle: ThemedStyledFunction<any, any>,\n  css: XCSSFunction,\n  generator?: StyleGenerator,\n) => {\n  const createStyle = (...args: Parameters<typeof css>) =>\n    // @ts-ignore\n    baseCreateStyle`${css(...args)}${generator}`\n  createStyle.attrs = (attrs: Parameters<typeof baseCreateStyle.attrs>[0]) =>\n    getCreateStyle(baseCreateStyle.attrs(attrs), css, generator)\n  createStyle.withConfig = (config: StyledConfig<any>) =>\n    getCreateStyle(baseCreateStyle.withConfig(config), css, generator)\n  return createStyle\n}\n\ntype BoxStyledTags<TProps extends object> = {\n  [Key in keyof BoxElements]: ThemedStyledFunction<\n    BoxElements[Key],\n    Theme,\n    TProps\n  >\n}\n\nexport interface XStyled<TGen extends StyleGenerator>\n  extends ThemedBaseStyledInterface<Theme>,\n    BoxStyledTags<StyleGeneratorProps<TGen>> {}\n\nconst createShouldForwardProp = (\n  generator: StyleGenerator,\n): ((\n  prop: string | number | symbol,\n  defaultValidatorFn: (prop: string | number | symbol) => boolean,\n  elementToBeCreated?: ElementType,\n) => boolean) => {\n  const propSet = new Set<string>(generator.meta.props)\n  return (\n    prop: string | number | symbol,\n    defaultValidatorFn: (prop: string | number | symbol) => boolean,\n    elementToBeCreated?: ElementType,\n  ) => {\n    if (string(prop) && propSet.has(prop)) {\n      return false\n    }\n    if (typeof elementToBeCreated === 'string') {\n      // We must test elementToBeCreated so we can pass through props for <x.div\n      // as={Component} />. However elementToBeCreated isn't available until\n      // styled-components 5.2.4 or 6, and in the meantime will be undefined.\n      // This means that HTML elements could get unwanted props, but ultimately\n      // this is a bug in the caller, because why are they passing unwanted\n      // props?\n      return defaultValidatorFn(prop)\n    }\n    return true\n  }\n}\n\nexport const createBaseStyled = <TGen extends StyleGenerator>(\n  css: XCSSFunction,\n  generator?: TGen,\n): XStyled<TGen> => {\n  const config = generator\n    ? {\n        shouldForwardProp: createShouldForwardProp(generator),\n      }\n    : {}\n  return ((component: Parameters<typeof scStyled>[0]) => {\n    const baseStyled = scStyledInterop(component)\n    return getCreateStyle(\n      config ? baseStyled.withConfig(config) : baseStyled,\n      css,\n      generator,\n    )\n  }) as XStyled<TGen>\n}\n\nexport const createStyled = <TGen extends StyleGenerator>(\n  generator: TGen,\n): XStyled<TGen> => {\n  const css = createCssFunction(generator)\n  const styled = createBaseStyled(css)\n  const xstyled = createBaseStyled(css, generator)\n  styled.box = xstyled('div')\n  Object.keys(scStyledInterop).forEach((key) => {\n    // @ts-ignore\n    styled[key] = styled(key)\n    // @ts-ignore\n    styled[`${key}Box`] = xstyled(key)\n  })\n  return styled\n}\n","/* eslint-disable no-continue, no-loop-func, no-cond-assign */\nimport scStyled, { StyledComponent, DefaultTheme } from 'styled-components'\nimport { StyleGenerator, StyleGeneratorProps } from '@xstyled/system'\nimport { createBaseStyled } from './createStyled'\nimport { createCssFunction } from './createCssFunction'\n\ntype JSXElementKeys = keyof JSX.IntrinsicElements\n\ntype SafeIntrinsicElement<T extends keyof JSX.IntrinsicElements> = (\n  props: Omit<JSX.IntrinsicElements[T], 'color'>,\n) => React.ReactElement<any, T>\n\nexport type X<TGen extends StyleGenerator> = {\n  [Key in JSXElementKeys]: StyledComponent<\n    SafeIntrinsicElement<Key>,\n    DefaultTheme,\n    StyleGeneratorProps<TGen>,\n    'color'\n  >\n}\n\nexport const createX = <TGen extends StyleGenerator>(\n  generator: TGen,\n): X<TGen> => {\n  const xstyled = createBaseStyled(createCssFunction(generator), generator)\n  const x = {} as X<TGen>\n  Object.keys(scStyled).forEach((tag) => {\n    // @ts-ignore\n    x[tag] = xstyled(tag)``\n  })\n  return x\n}\n","import { createGlobalStyle as scCreateGlobalStyle } from 'styled-components'\nimport { StyleGenerator } from '@xstyled/system'\nimport { createCssFunction } from './createCssFunction'\n\nexport type XCreateGlobalStyle = typeof scCreateGlobalStyle\n\nexport const createCreateGlobalStyle = <TGen extends StyleGenerator>(\n  generator: TGen,\n): XCreateGlobalStyle => {\n  const css = createCssFunction(generator)\n  return ((\n    ...args: Parameters<XCreateGlobalStyle>\n  ): ReturnType<XCreateGlobalStyle> =>\n    scCreateGlobalStyle([\n      // @ts-ignore\n      css(...args),\n    ])) as XCreateGlobalStyle\n}\n","import { StyleGenerator } from '@xstyled/system'\nimport { createCssFunction, XCSSFunction } from './createCssFunction'\nimport { createX, X } from './createX'\nimport { createStyled, XStyled } from './createStyled'\nimport {\n  createCreateGlobalStyle,\n  XCreateGlobalStyle,\n} from './createCreateGlobalStyle'\n\ninterface XStyledSet<TGen extends StyleGenerator> {\n  css: XCSSFunction\n  x: X<TGen>\n  styled: XStyled<TGen>\n  createGlobalStyle: XCreateGlobalStyle\n}\n\nexport const createCss = <TGen extends StyleGenerator>(\n  generator: TGen,\n): XStyledSet<TGen> => {\n  return {\n    css: createCssFunction(generator),\n    x: createX(generator),\n    styled: createStyled(generator),\n    createGlobalStyle: createCreateGlobalStyle(generator),\n  }\n}\n","export {\n  isStyledComponent,\n  keyframes,\n  ServerStyleSheet,\n  StyleSheetManager,\n  ThemeConsumer,\n  ThemeContext,\n  ThemeProvider,\n  withTheme,\n} from 'styled-components'\nexport * from './colorModes'\nexport * from './theme'\nexport * from './breakpoints'\nexport * from './preflight'\nexport * from '@xstyled/system'\nexport * from './create'\n\n// Create and export default system\nimport { system } from '@xstyled/system'\nimport { createCss } from './create'\n\nconst { css, styled, x, createGlobalStyle } = createCss(system)\nexport { css, styled, styled as default, x, createGlobalStyle }\n"],"names":["createGlobalStyle","scCss","scCreateGlobalStyle","system"],"mappings":"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"}