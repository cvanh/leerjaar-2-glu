{"version":3,"file":"index.esm.js","sources":["../src/breakpoints.ts","../src/customProperties.ts","../src/colorModes.tsx","../src/createBox.ts","../src/mediaGetters.ts","../src/transform.ts","../src/theme.ts"],"sourcesContent":["/* eslint-disable no-undef */\nimport * as React from 'react'\nimport { getScreens, ITheme, Screens } from '@xstyled/system'\n\nexport function useThemeScreens(theme: ITheme): Screens {\n  return getScreens({ theme })\n}\n\n/**\n * Minimum breakpoint width.\n * Null for the smallest breakpoint.\n */\nfunction useThemeMinValue(theme: ITheme, key: string | number): number | null {\n  const screens = useThemeScreens(theme)\n  const value = screens[key]\n  return value === 0 ? null : value\n}\n\n/**\n * Maximum breakpoint width. Null for the largest (last) breakpoint.\n * The maximum value is calculated as the minimum of the next one less 0.02px\n * to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n * See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n * Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n * See https://bugs.webkit.org/show_bug.cgi?id=178261\n */\nfunction useThemeMaxValue(theme: ITheme, key: string | number): number | null {\n  const screens = useThemeScreens(theme)\n  const breakPoint = screens[key]\n  return breakPoint === 0 ? null : breakPoint - 0.02\n}\n\nexport function useViewportWidth(): number | null {\n  const [width, setWidth] = React.useState(\n    typeof window === 'undefined' ? null : window.innerWidth,\n  )\n\n  React.useEffect(() => {\n    function handleResize() {\n      setWidth(window.innerWidth)\n    }\n\n    // Add the listener, then setWidth to avoid race.\n    window.addEventListener('resize', handleResize)\n    setWidth(window.innerWidth)\n\n    return () => window.removeEventListener('resize', handleResize)\n  }, [])\n\n  return width\n}\n\nexport function useThemeBreakpoint(theme: ITheme): string | null {\n  const screns = useThemeScreens(theme)\n  const width = useViewportWidth()\n  return React.useMemo(() => {\n    return (\n      Object.keys(screns)\n        .reverse()\n        .find((screen) => width !== null && width > screns[screen]) || null\n    )\n  }, [screns, width])\n}\n\nexport function useThemeUp(theme: ITheme, key: string | number): boolean {\n  const value = useThemeMinValue(theme, key)\n  const width = useViewportWidth()\n  return width !== null && value !== null && width >= value\n}\n\nexport function useThemeDown(theme: ITheme, key: string | number): boolean {\n  const value = useThemeMaxValue(theme, key)\n  const width = useViewportWidth()\n  return width !== null && value !== null && width < value\n}\n","import { obj, string, func, cascade } from '@xstyled/util'\nimport { ITheme } from '@xstyled/system'\n\nconst join = (...args: (string | undefined)[]): string =>\n  args.filter(Boolean).join('.')\n\nconst toVarName = (key: string): string => `--${key.replace(/\\./g, '-')}`\nconst toVarValue = (key: string, value: string): string =>\n  `var(${toVarName(key)}, ${value})`\nconst toProp = (key: string, value: string): string => `${key}: ${value};`\n\nexport function toCustomPropertiesReferences<\n  T extends Record<string | number, unknown>\n>(\n  values: T,\n  theme?: ITheme,\n  keys: string[] = Object.keys(values),\n  parent?: string,\n): Record<string | number, unknown> {\n  const next: Record<string | number, unknown> = Array.isArray(values)\n    ? ([] as Record<number, string>)\n    : ({} as Record<string, string>)\n\n  for (const i in keys) {\n    const key = keys[i]\n    const value = values[key]\n    const name = join(parent, key)\n    if (obj(value)) {\n      next[key] = toCustomPropertiesReferences(\n        value as { [key: string]: unknown },\n        theme,\n        Object.keys(value),\n        name,\n      )\n      continue\n    }\n    if (string(value)) {\n      next[key] = toVarValue(name, value)\n      continue\n    }\n    if (func(value)) {\n      next[key] = toVarValue(name, cascade(value, { theme }))\n      continue\n    }\n  }\n\n  return next\n}\n\nexport function toCustomPropertiesDeclarations(\n  values: { [key: string]: unknown },\n  theme?: ITheme,\n  keys: string[] = Object.keys(values),\n  parent?: string,\n  state = { value: '' },\n): string {\n  for (const i in keys) {\n    const key = keys[i]\n    const value = values[key]\n    const name = join(parent, key)\n    if (obj(value)) {\n      toCustomPropertiesDeclarations(\n        value as { [key: string]: unknown },\n        theme,\n        Object.keys(value),\n        name,\n        state,\n      )\n      continue\n    }\n    if (string(value)) {\n      state.value += toProp(toVarName(name), value)\n      continue\n    }\n    if (func(value)) {\n      state.value += toProp(toVarName(name), cascade(value, { theme }))\n      continue\n    }\n  }\n\n  return state.value\n}\n","/* eslint-disable @typescript-eslint/no-empty-function */\n/* eslint-disable react/no-danger */\n/* eslint-env browser */\nimport * as React from 'react'\nimport { Colors } from '@xstyled/system'\nimport {\n  toCustomPropertiesDeclarations,\n  toCustomPropertiesReferences,\n} from './customProperties'\n\ntype ColorModeState = [string | null, (mode: string | null) => void]\n\ninterface ColorModes {\n  [key: string]: Colors\n}\n\ninterface ITheme {\n  useCustomProperties?: boolean\n  useColorSchemeMediaQuery?: boolean\n  initialColorModeName?: string\n  defaultColorModeName?: string\n  colors?: Colors & {\n    modes?: ColorModes\n  }\n}\n\ninterface IColorModeTheme extends ITheme {\n  colors: Colors & { modes: ColorModes }\n}\n\nconst STORAGE_KEY = 'xstyled-color-mode'\n\nconst isLocalStorageAvailable: boolean =\n  typeof window !== 'undefined' &&\n  (() => {\n    try {\n      const key = 'xstyled-test-key'\n      window.localStorage.setItem(key, key)\n      window.localStorage.removeItem(key)\n      return true\n    } catch (err) {\n      return false\n    }\n  })()\n\ninterface Storage {\n  get(): string | null\n  set(value: string): void\n  clear(): void\n}\n\nconst storage: Storage = isLocalStorageAvailable\n  ? {\n      get: () => window.localStorage.getItem(STORAGE_KEY),\n      set: (value: string) => {\n        window.localStorage.setItem(STORAGE_KEY, value)\n      },\n      clear: () => window.localStorage.removeItem(STORAGE_KEY),\n    }\n  : {\n      get: () => null,\n      set: () => {},\n      clear: () => {},\n    }\n\nconst COLOR_MODE_CLASS_PREFIX = 'xstyled-color-mode-'\nconst getColorModeClassName = (mode: string) =>\n  `${COLOR_MODE_CLASS_PREFIX}${mode}`\n\nconst XSTYLED_COLORS_PREFIX = 'xstyled-colors'\nconst SYSTEM_MODES = ['light', 'dark']\n\nfunction getModeTheme(theme: IColorModeTheme, mode: string): IColorModeTheme {\n  return {\n    ...theme,\n    colors: { ...theme.colors, ...theme.colors.modes[mode] },\n  }\n}\n\nconst getMediaQuery = (query: string): string => `@media ${query}`\nconst getColorModeQuery = (mode: string): string =>\n  `(prefers-color-scheme: ${mode})`\n\nfunction checkHasColorModes(theme: ITheme | null): theme is IColorModeTheme {\n  return Boolean(theme && theme.colors && theme.colors.modes)\n}\n\nfunction checkHasCustomPropertiesEnabled(theme: ITheme | null): boolean {\n  return Boolean(\n    theme &&\n      (theme.useCustomProperties === undefined || theme.useCustomProperties),\n  )\n}\n\nfunction checkHasMediaQueryEnabled(theme: ITheme | null): boolean {\n  return Boolean(\n    theme &&\n      (theme.useColorSchemeMediaQuery === undefined ||\n        theme.useColorSchemeMediaQuery),\n  )\n}\n\nfunction getInitialColorModeName(theme: ITheme): string {\n  return theme.initialColorModeName || 'default'\n}\n\nfunction getDefaultColorModeName(theme: ITheme): string {\n  return theme.defaultColorModeName || getInitialColorModeName(theme)\n}\n\nfunction getUsedColorKeys(modes: ColorModes) {\n  let keys: string[] = []\n  for (const key in modes) {\n    keys = [...keys, ...Object.keys(modes[key])]\n  }\n  return keys\n}\n\nexport function createColorStyles(\n  theme: ITheme,\n  { targetSelector = 'body' } = {},\n): string | null {\n  if (!checkHasColorModes(theme)) return null\n\n  const { modes, ...colors } = theme.colors\n  const colorKeys = getUsedColorKeys(modes)\n\n  let styles = toCustomPropertiesDeclarations(\n    colors,\n    theme,\n    colorKeys,\n    XSTYLED_COLORS_PREFIX,\n  )\n\n  function getModePropertiesDeclarations(mode: string) {\n    const modeTheme = getModeTheme(theme as IColorModeTheme, mode)\n    const { modes, ...colors } = modeTheme.colors\n    return toCustomPropertiesDeclarations(\n      { ...colors, ...modes[mode] },\n      modeTheme,\n      colorKeys,\n      XSTYLED_COLORS_PREFIX,\n    )\n  }\n\n  if (theme.useColorSchemeMediaQuery !== false) {\n    SYSTEM_MODES.forEach((mode) => {\n      if (modes[mode]) {\n        const mediaQuery = getMediaQuery(getColorModeQuery(mode))\n        styles += `${mediaQuery}{${getModePropertiesDeclarations(mode)}}`\n      }\n    })\n  }\n\n  const initialModeName = getInitialColorModeName(theme)\n  ;[initialModeName, ...Object.keys(modes)].forEach((mode) => {\n    const key = `&.${getColorModeClassName(mode)}`\n    styles += `${key}{${getModePropertiesDeclarations(mode)}}`\n  })\n\n  return `${targetSelector}{${styles}}`\n}\n\nfunction getSystemModeMql(mode: string) {\n  if (typeof window === 'undefined' || window.matchMedia === undefined) {\n    return null\n  }\n  const query = getColorModeQuery(mode)\n  return window.matchMedia(query)\n}\n\nfunction useSystemMode(theme: ITheme) {\n  const configs: { mode: string; mql: MediaQueryList }[] = React.useMemo(() => {\n    if (!checkHasMediaQueryEnabled(theme)) return []\n    return SYSTEM_MODES.map((mode) => {\n      if (!checkHasColorModes(theme)) return null\n      if (!theme.colors.modes[mode]) return null\n      const mql = getSystemModeMql(mode)\n      return mql ? { mode, mql } : null\n    }).filter(Boolean) as { mode: string; mql: MediaQueryList }[]\n  }, [theme])\n\n  const [systemMode, setSystemMode] = React.useState(() => {\n    const config = configs.find((config) => config.mql.matches)\n    return config ? config.mode : null\n  })\n\n  React.useEffect(() => {\n    const cleans = configs.map(({ mode, mql }) => {\n      const handler = ({ matches }: MediaQueryListEvent) => {\n        if (matches) {\n          setSystemMode(mode)\n        } else {\n          setSystemMode((previousMode) => (previousMode === mode ? null : mode))\n        }\n      }\n      mql.addEventListener('change', handler)\n      return () => mql.removeEventListener('change', handler)\n    })\n    return () => cleans.forEach((clean) => clean())\n  })\n\n  return systemMode\n}\n\nconst useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect\n\nexport function useColorModeState(\n  theme: ITheme,\n  { target }: { target?: Element } = {},\n): ColorModeState {\n  const systemMode = useSystemMode(theme)\n  const defaultColorMode = getDefaultColorModeName(theme)\n  const initialColorMode = getInitialColorModeName(theme)\n  const [mode, setMode] = React.useState(() => {\n    if (!checkHasColorModes(theme)) return null\n    return defaultColorMode\n  })\n\n  // Add mode className\n  const customPropertiesEnabled = checkHasCustomPropertiesEnabled(theme)\n\n  const manualSetRef = React.useRef(false)\n  const manuallySetMode = React.useCallback((value) => {\n    manualSetRef.current = true\n    setMode(value)\n  }, [])\n\n  // Set initial color mode in lazy\n  useIsomorphicLayoutEffect(() => {\n    if (!checkHasColorModes(theme)) return\n    const storedMode = storage.get()\n    const initialMode = storedMode || systemMode || defaultColorMode\n    if (mode !== initialMode) {\n      setMode(storedMode || systemMode || defaultColorMode)\n    }\n  }, [])\n\n  // Store mode preference\n  useIsomorphicLayoutEffect(() => {\n    if (manualSetRef.current) {\n      if (mode) {\n        storage.set(mode)\n      } else {\n        storage.clear()\n      }\n    }\n  }, [mode])\n\n  // Sync system mode\n  useIsomorphicLayoutEffect(() => {\n    const storedMode = storage.get()\n    if (storedMode) return\n    const targetMode = systemMode || defaultColorMode\n    if (targetMode === mode) return\n    setMode(targetMode)\n  }, [mode, systemMode, defaultColorMode])\n\n  // Add and remove class names\n  useIsomorphicLayoutEffect(() => {\n    if (!mode) return undefined\n    if (!customPropertiesEnabled) return undefined\n    const stored = storage.get()\n    const initial = initialColorMode !== mode\n    if (!stored && !initial) return undefined\n    const className = getColorModeClassName(mode)\n    const usedTarget = target || document.body\n    usedTarget.classList.add(className)\n    return () => {\n      usedTarget.classList.remove(className)\n    }\n  }, [customPropertiesEnabled, target, mode, initialColorMode])\n\n  return [mode, manuallySetMode]\n}\n\nexport function useColorModeTheme(\n  theme: ITheme,\n  mode: string | null,\n): ITheme | null {\n  const [initialMode] = React.useState(mode)\n  const customPropertiesTheme = React.useMemo(() => {\n    if (!initialMode) return null\n    if (!checkHasCustomPropertiesEnabled(theme)) return null\n    if (!checkHasColorModes(theme)) return theme\n    const { modes, ...colors } = theme.colors\n    const colorKeys = getUsedColorKeys(modes)\n\n    return {\n      ...theme,\n      colors: {\n        ...colors,\n        ...toCustomPropertiesReferences(\n          colors,\n          theme,\n          colorKeys,\n          XSTYLED_COLORS_PREFIX,\n        ),\n        modes,\n      },\n      __rawColors: theme.colors,\n    }\n  }, [initialMode, theme])\n\n  const swapModeTheme = React.useMemo(() => {\n    if (!mode) return null\n    if (checkHasCustomPropertiesEnabled(theme)) return null\n    if (!checkHasColorModes(theme)) return theme\n\n    if (mode === getInitialColorModeName(theme)) {\n      return { ...theme, __colorMode: mode }\n    }\n\n    return {\n      ...theme,\n      colors: {\n        ...theme.colors,\n        ...theme.colors.modes[mode],\n      },\n      __colorMode: mode,\n      __rawColors: theme.colors,\n    }\n  }, [theme, mode])\n\n  return (customPropertiesTheme || swapModeTheme) as ITheme\n}\n\nexport const ColorModeContext = React.createContext<ColorModeState | null>(null)\n\nexport function useColorMode(): ColorModeState {\n  const colorModeState = React.useContext(ColorModeContext)\n\n  if (!colorModeState) {\n    throw new Error(`[useColorMode] requires the ColorModeProvider component`)\n  }\n\n  return colorModeState\n}\n\nexport interface ColorModeProviderProps {\n  children: React.ReactNode\n  target?: Element\n  targetSelector?: string\n}\n\nexport function createColorModeProvider({\n  ThemeContext,\n  ThemeProvider,\n  ColorModeStyle,\n}: {\n  ThemeContext: React.Context<any>\n  ThemeProvider: React.ComponentType<any>\n  ColorModeStyle: React.ComponentType<any>\n}): React.FC<ColorModeProviderProps> {\n  function ColorModeProvider({\n    children,\n    target,\n    targetSelector,\n  }: ColorModeProviderProps) {\n    const theme = React.useContext(ThemeContext)\n    if (!theme) {\n      throw new Error(\n        '[ColorModeProvider] requires ThemeProvider upper in the tree',\n      )\n    }\n    const colorState = useColorModeState(theme, { target })\n    const colorModeTheme = useColorModeTheme(theme, colorState[0])\n    return (\n      <>\n        <ColorModeStyle targetSelector={targetSelector} />\n        <ThemeProvider theme={colorModeTheme}>\n          <ColorModeContext.Provider value={colorState}>\n            {children}\n          </ColorModeContext.Provider>\n        </ThemeProvider>\n      </>\n    )\n  }\n  return ColorModeProvider\n}\n\ninterface GetInitScriptOptions {\n  target?: string\n}\n\nfunction getInitScript({\n  target = 'document.body',\n}: GetInitScriptOptions = {}) {\n  return `(function() { try {\n    var mode = localStorage.getItem('${STORAGE_KEY}');\n    if (mode) ${target}.classList.add('${COLOR_MODE_CLASS_PREFIX}' + mode);\n  } catch (e) {} })();`\n}\n\nexport function getColorModeInitScriptElement(\n  options?: GetInitScriptOptions,\n): JSX.Element {\n  return (\n    <script\n      key=\"xstyled-color-mode-init\"\n      dangerouslySetInnerHTML={{ __html: getInitScript(options) }}\n    />\n  )\n}\n\nexport function getColorModeInitScriptTag(\n  options?: GetInitScriptOptions,\n): string {\n  return `<script>${getInitScript(options)}</script>`\n}\n","import { system } from '@xstyled/system'\n\nexport function createBox(): (string | typeof system)[] {\n  return [`&&{`, system, `}`]\n}\ncreateBox.meta = system.meta\n","import { getScreens, getBreakpointMin, getBreakpointMax } from '@xstyled/system'\n\nconst getMediaWidth = (getBreakpointBound: any) => (value: any) => (\n  props: any,\n) => {\n  const v = getBreakpointBound(getScreens(props), value)\n  // getters return null for smallest, undefined for not found, and otherwise\n  // a px string. Since we MUST emit a matcher at this point, use 0px for the\n  // smallest case (always true for min, never true for max).\n  return v === null ? '0' : v || value\n}\n\nexport const mediaGetters = {\n  'min-width': getMediaWidth(getBreakpointMin),\n  'max-width': getMediaWidth(getBreakpointMax),\n}\n","/* eslint-disable no-continue, no-loop-func, no-cond-assign */\nimport type { StyleGenerator } from '@xstyled/system'\nimport { mediaGetters } from './mediaGetters'\n\n// prop name is an ident: word chars, underscore and dash.\nconst PROP_CHAR = `[-\\\\w]`\n\n// prop value consists of non-semis and no curly braces unless backslash-escaped.\n// This uses [\\s\\S] instead of . because IE11 doesn't support the s flag.\nconst VALUE_CHAR = `(?:\\\\\\\\[\\\\s\\\\S]|[^\\\\\\\\;{}])`\n\n// prettier-ignore\nconst PROP_PATT = (\n  `(${PROP_CHAR}+)` +   // capture prop name\n  `(\\\\s*:\\\\s*)` +       // colon & whitespace\n  `(?=\\\\S)` +           // prop value starts with non-whitespace\n  `(${VALUE_CHAR}*?)` + // capture prop value (non-greedy)\n  `(\\\\s*!important)?` + // capture !important\n  `(\\\\s*;)`             // semi & whitespace\n)\n\n// simplistic but workable media query value.\nconst MEDIA_CHAR = `[^{]`\n\n// prettier-ignore\nconst MEDIA_PATT = (\n  `(@media\\\\b\\\\s*)` +   // start of media query\n  `(?=\\\\S)` +           // value starts with non-whitespace\n  `(${MEDIA_CHAR}+?)` + // capture queries (non-greedy)\n  `(\\\\s*\\\\{)`           // brace & whitespace\n)\n\nconst MATCH_REGEXP = new RegExp(`(?:${PROP_PATT}|${MEDIA_PATT})`, `g`)\n\n// media query prop/value pairs such as (min-width: 1024px)\n// prettier-ignore\nconst QUERY_REGEXP = new RegExp(\n  `(\\\\(\\\\s*)` +       // open paren, whitespace\n  `(${PROP_CHAR}+)` + // capture prop name\n  `(\\\\s*:\\\\s*)` +     // colon & whitespace\n  `([^\\\\)]*?)` +      // capture prop value (non-greedy)\n  `(\\\\s*\\\\))`,        // close paren, whitespace\n  `g`\n)\n\nconst mediaTransform = (rawValue: string) => {\n  let matches\n  let lastIndex = 0\n  const values = []\n  while ((matches = QUERY_REGEXP.exec(rawValue))) {\n    const [, open, prop, colon, value, close] = matches\n    const getter = (mediaGetters as any)[prop]\n    if (getter) {\n      values.push(rawValue.slice(lastIndex, matches.index))\n      values.push(\n        (p: object) => `${open}${prop}${colon}${getter(value)(p)}${close}`,\n      )\n      lastIndex = matches.index + matches[0].length\n    }\n  }\n  values.push(rawValue.slice(lastIndex, rawValue.length))\n  return values\n}\n\nexport const createTransform =\n  (generator: StyleGenerator) =>\n  (rawValue: any): any => {\n    if (typeof rawValue !== 'string') return rawValue\n    let matches\n    let lastIndex = 0\n    const values = []\n    while ((matches = MATCH_REGEXP.exec(rawValue))) {\n      const [, prop, colon, value, imp, semi, media, query, brace] = matches\n      if (media) {\n        values.push(rawValue.slice(lastIndex, matches.index))\n        values.push(media)\n        mediaTransform(query).forEach((v) => values.push(v))\n        values.push(brace)\n        lastIndex = matches.index + matches[0].length\n      } else {\n        const getter = generator.meta.cssGetters[prop]\n        if (getter) {\n          values.push(rawValue.slice(lastIndex, matches.index))\n          values.push(\n            (p: object) =>\n              `${prop}${colon}${getter(value)(p)}${imp || ''}${semi}`,\n          )\n          lastIndex = matches.index + matches[0].length\n        }\n      }\n    }\n    values.push(rawValue.slice(lastIndex, rawValue.length))\n    return values\n  }\n","import { useMemo } from 'react'\nimport { ThemeGetter, ThemeGetterType, CSSScalar } from '@xstyled/system'\n\nexport const createUseGetter =\n  <T extends ThemeGetter>(getter: T, useTheme: () => object) =>\n  (value: ThemeGetterType<T>, defaultValue?: CSSScalar): CSSScalar => {\n    const theme = useTheme()\n    return useMemo(\n      () => getter(value, defaultValue)({ theme }),\n      [value, defaultValue, theme],\n    )\n  }\n"],"names":[],"mappings":"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"}